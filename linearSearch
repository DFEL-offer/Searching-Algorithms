/*
一. 线性查找的核心思想
线性查找（Linear Search）是一种简单的搜索算法，其核心思想包括以下几个步骤：
    1.逐一检查（Iterative Checking）：
        -从数据集合的第一个元素开始，依次检查每个元素是否与目标值相等。
    2.匹配目标（Match Target）：
        -一旦找到与目标值相等的元素，立即返回该元素的位置（索引）。
    3.检查结束（Complete Search）：
        -如果遍历完所有元素后仍未找到目标值，则返回“未找到”的标志。
二. 时间复杂度
    1.最坏情况：O(n)
        -在最坏的情况下，目标值是数组的最后一个元素或者根本不存在，需要遍历整个数组。
    2.最好情况：O(1)
        -如果目标值是数组的第一个元素，只需一次检查即可找到目标值。
    3.平均情况：O(n)
        -在随机分布的情况下，线性查找的平均时间复杂度为 O(n)。
三. 空间复杂度
    1.空间复杂度：O(1)
        -线性查找只需要常量级别的辅助空间，无需分配额外的存储空间。
四. 优点
    1.实现简单：
        -线性查找算法逻辑清晰，实现起来非常简单。
    2.无需排序：
        -线性查找对输入数据的顺序没有要求，可以直接在无序数据上工作。
    3.适用小规模数据：
        -对于小规模数据集，线性查找的效率通常可以接受。
    4.适用范围广：
        -适用于数组、链表等多种数据结构。
五. 缺点
    1.效率较低：
        -在线性查找中，查找效率与数据规模成线性关系，对于大规模数据性能较差。
    2.无法利用已排序数据：
        -线性查找没有充分利用排序信息，相较于二分查找等算法缺乏优化潜力。
    3.不适合大规模数据：
        -在处理大规模数据时，线性查找效率可能无法满足实际需求。
六. 适用场景
    1.小规模数据集的查找：
        -数据量较小时，线性查找实现简单且效率可以接受。
    2.无序数据的查找：
        -在数据未排序的情况下，线性查找是基本且可行的解决方案。
    3.复杂结构的查找：
        -当数据以链表等无法随机访问的形式存储时，线性查找是首选方法。
    4.目标分布未知：
        -在无法对目标值分布做出假设的情况下，线性查找具有通用性。
*/
#include <stdio.h>

// 线性查找函数
int linearSearch(int arr[], int size, int target) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == target) { // 如果找到目标值，返回下标索引
            return i;
        }
    }
    return -1; // 如果未找到目标值，返回 -1
}

int main() {
    int arr[] = {5, 3, 8, 6, 2, 9, 4};
    int size = sizeof(arr) / sizeof(arr[0]);
    int target;

    printf("请输入要查找的数字: ");
    scanf("%d", &target);

    int result = linearSearch(arr, size, target);

    if (result != -1) {
        printf("数字 %d 在数组中的索引位置为: %d\n", target, result);
    } else {
        printf("数字 %d 未在数组中找到。\n", target);
    }
    return 0;
}
